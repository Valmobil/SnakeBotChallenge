Логика работы бота.
     * С помощью модифицированного алгоритма нахождения кратчайшего пути (BFS), расчитываются несколько сценариев воведения бота. У каждого сценария есть свой вес, измеряемый в количеcтве очков, которые можно заработать. Считаем все сценарии. Если времени на расчет всех сценарием не хватает - берем самый "доходный" их уже посчитанных на данный момент.
     * Сценарий 1 - "выжиание" - не приносит баллов, заключается в проверке того, что голова "видит" свой хвост. Если идти за своим хвостом - никогда не заблудишься :) и выйдешь из любого лабиринта.
     * Сценарий 2 - "выживание 2" - если конкуренты зажали в угол, и хвоста не видно, откусываем свой хвост, чтобы выйти из тупика.
     * Сценарий 3 - ищем ближайший съедобный объект (яблоки, камни, звост или голова противника, таблетки). У каждого тима есть свои ограницения, когда их можно брать, когда нельзя.
     *    - камни, берем если длина змени юольше длины остальных змей - моя змея должна быть больше самой большой змени, чообы иметь возможность атаковать других змей
     *    - голова противника - только если текущий размер змеи больше конкурента. В противном случае избегаем противника (мин 1 клетка вокруг головы противника)
     * Сценарий 4 - проверка, сможем ли мы найти свой хвост, если мы достигнем цели, из сценария 3 (раним BFS, из найденной точки к хвосту). Если хвост не находится - цель в сценарии 3 получает минимальный вес. Этот сценарий не позволяет боту заходить в тупики и избегать "лабиринтов" из тел конкурентов.
     * Сценарий 5 - ищем на поле ближайшее золото + проверяем, сможем ли мы выйти к своему хвосту, если его возьмем.
     * Сценарий 6 - ищем таблетки Fury. Если найдена таблетка, ищем есть ли в 10 шагах от нее конкуренты.



Чтобы настроить клиент сделай следующее:
- установи Java (JDK 7 или 8)
- установи Maven3
- импортируй текущий проект как Maven project в Intellij Idea (Eclipse не рекомендуется)
- если нет интернета и не будет хватать engine dependency
    = на странице http://host/codenjoy-contest/help можно скачать zip с этим dependency
        ~ тут host
            = server_ip:8080 для игры с сервером поднятым в локальной сети
            = codenjoy.com для игры с общим сервером размещенным в интернете
    = там же есть инструкции по игре
- в классе .\src\main\java\com\codenjoy\dojo\<game_package>\client\YourSolver.java
    = впиши имейл с которым ты регистрировался на сервере в константу USER_NAME
    = напиши свою логику в методе
        public String get(Board board) {
    = запусти YourSolver класс как main метод
        ~ обрати внимание, что для игры с локальным сервером в main методе стоит расскоментировать строчку
            WebSocketRunner.runOnServer("192.168.1.1:8080", // to use for local server
        ~ указать IP сервера
        ~ и закомментировать строчку для подключения к удаленному серверу
            WebSocketRunner.run(WebSocketRunner.Host.REMOTE, // to use for codenjoy.com server
    = загляни на http://host/codenjoy-contest/board/game/<game_name>
      твой бот должен был начать двигаться
    = перезапусти процесс, если сделал изменения
        ~ внимание! только один YourSolver за раз можно запустить - следи за этим
- в классе .\src\main\java\com\codenjoy\dojo\<game_package>\client\Board.java
    = можешь дополнять воспомагательные методы для парсинга борды из строки
- В тестовом пакете .\src\test\java\com\codenjoy\dojo\<game_package>\client
    = можешь размещать свои тесты
- Codenjoy!
